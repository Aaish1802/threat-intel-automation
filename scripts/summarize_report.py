# scripts/summarize_report.py

import sqlite3
import pandas as pd
import markdown
from jinja2 import Template
from weasyprint import HTML
import logging

logging.basicConfig(filename='pipeline.log', level=logging.INFO)

def main():
    logging.info("Generating threat summary report...")

    # Connect DB
    conn = sqlite3.connect("threat_feeds.db")
    df = pd.read_sql_query("SELECT * FROM classified_threats", conn)

    # Count threat types
    summary = df['threat_type'].value_counts().reset_index()
    summary.columns = ['Threat Type', 'Count']

    # CVEs
    cve_entries = df[df['title'].str.contains("CVE", case=False, na=False)][['title', 'published']]

    # MITRE TTPs
    top_ttps = df['mitre_ttp'].value_counts().head(5).reset_index().values.tolist()

    # Markdown template
    template_str = """
# üö® Weekly Threat Intelligence Summary

## üî¢ Threat Summary by Category
{% for row in summary %}
- **{{ row['Threat Type'] }}**: {{ row['Count'] }}
{% endfor %}

## üß† Emerging CVEs
{% for row in cves %}
- {{ row['title'] }} (Published: {{ row['published'] }})
{% endfor %}

## üìö Top MITRE ATT&CK Techniques
{% for row in ttps %}
- {{ row[0] }} ‚Üí {{ row[1] }}
{% endfor %}

üìù Generated by Team 7 | Unnati Panchal
    """

    template = Template(template_str)
    report_md = template.render(
        summary=summary.to_dict(orient='records'),
        cves=cve_entries.to_dict(orient='records'),
        ttps=top_ttps
    )

    with open("threat_summary.md", "w") as f:
        f.write(report_md)

    html = markdown.markdown(report_md)
    HTML(string=html).write_pdf("threat_summary.pdf")
    logging.info("Summary report created as threat_summary.pdf")

if __name__ == "__main__":
    main()
